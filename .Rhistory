estimate_kappa = FALSE,
covs = colnames(data_CV)
# method="BFGS",newtonsteps = 1
)
matrixCSVtot[semID] <-  psem$opt$convergence
assign(paste0("psemFINALtot", "_sem", semID), psem)
# output 1 : dataset completed
df.1 = as_phylo4d(psem)
df.2 = as(df.1, "data.frame")
df.3 = df.2[order(df.2$label),]
df.4 = df.3[df.3$node.type == "tip", ]
df = df.4[,!names(df.4) %in% c("node", "ancestor", "edge.length", "node.type")]
labels  = stringr::str_replace_all(rownames(df), "_", " ")
IDosmose= as.numeric(labels %in% osmosespnames)
df$osmose <- IDosmose
# output 2 : SEM and path coeffients
semmodel = summary(psem)$coefficients
#
# output 3 : std and not std path coefficients
coefnotstd <- coef(psem, standardized =FALSE)
coefstd <- coef(psem, standardized =TRUE)
coef = cbind(coefnotstd, coefstd[,3])
colnames(coef) <- c("Path", "Parameter", "EstimateNotStd", "EstimateStd")
if (file.exists(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "semmodel", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "semmodel", "_", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "MLE", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "MLE", "_", ".csv"))
}
write.csv(semmodel, paste0(pathoutput, "/", "semmodel", "_", modelname[semID],".csv"))
write.csv(coef, paste0(pathoutput, "/", "coefnostd_std", "_", modelname[semID],".csv"))
write.csv(df, paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
# output4 : only OSMOSE values
write.csv(df[IDosmose, c("c_m")], paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
#* PLOT SEM WITH CORRELATION
#*
my_fitted_DAG = as_fitted_DAG(psem)
coef_plot( my_fitted_DAG, error_bar = "se")
pdf(file=paste0(pathoutput, "/", modelname[semID], "SEM_DEG.pdf"), paper='a4r', width=200)
plt <- plot(my_fitted_DAG, las = 2 )
print(plt)
dev.off()
}
as.character(modellist[[semID]])
data_CV
View(data_CV)
dataset_traits$tm
dataset_traits$tm
which(dataset_traits$tm == NaN)
is.nan(dataset_traits$tm)
dataset_traits$tm <- dataset_traits$tm[-which(is.nan(dataset_traits$tm))]
dataset_traits$tm[which(is.nan(dataset_traits$tm))] <- NA
setwd("~/osmose/updated_parameters_osmose-med/Mass_specific_maintenance_dataset_building/01-Simulations/Outputs")
path <- c("~/osmose/updated_parameters_osmose-med/Mass_specific_maintenance_dataset_building/01-Simulations/Scripts/")
pathoutput <- c("~/osmose/updated_parameters_osmose-med/Mass_specific_maintenance_dataset_building/01-Simulations/Outputs/test")
source(paste0(path, "/functionsphylosem.R"))
path <- c("~/osmose/updated_parameters_osmose-med/Mass_specific_maintenance_dataset_building/01-Simulations/Scripts/")
pathoutput <- c("~/osmose/updated_parameters_osmose-med/Mass_specific_maintenance_dataset_building/01-Simulations/Outputs/test")
osmosespnames <- c("Alosa alosa",                "Alosa fallax",                "Anguilla anguilla",           "Argyrosomus regius",          "Aristaeomorpha foliacea",
"Aristeus antennatus",         "Atherina boyeri",             "Auxis rochei",          "Belone belone",               "Boops boops",
"Caranx crysos",               "Chelidonichthys lucerna",     "Coris julis",                 "Coryphaena hippurus",         "Crangon crangon",
"Crystallogobius linearis",    "Dentex dentex",               "Dentex gibbosus",             "Dentex maroccanus",           "Dicentrarchus labrax",
"Diplodus annularis",          "Diplodus cervinus",           "Diplodus puntazzo",           "Diplodus sargus",       "Diplodus vulgaris",
"Eledone cirrhosa",            "Engraulis encrasicolus",      "Epinephelus aeneus",          "Epinephelus marginatus",      "Etrumeus sadina",
"Eutrigla gurnardus",          "Galeus melastomus",           "Gobius niger",                "Halobatrachus didactylus",    "Illex coindetii",
"Lepidorhombus whiffiagonis",  "Chelon auratus",                 "Chelon ramada",                 "Chelon saliens",                "Loligo vulgaris",
"Lophius budegassa",           "Lophius piscatorius",         "Merlangius merlangus",        "Merluccius merluccius",       "Micromesistius poutassou",
"Mugil cephalus",              "Mullus barbatus",             "Mullus surmuletus",           "Mustelus mustelus",           "Nephrops norvegicus",
"Octopus vulgaris",            "Pagellus acarne",             "Pagellus erythrinus",         "Pagrus pagrus",               "Palaemon serratus",
"Palinurus elephas",           "Parapenaeus longirostris",    "Penaeus kerathurus",          "Phycis phycis",               "Platichthys flesus",
"Pleuronectes platessa",       "Pomatomus saltatrix",         "Pomatoschistus marmoratus",   "Pomatoschistus minutus",      "Rhinobatos rhinobatos",
"Sarda sarda",                 "Sardina pilchardus",          "Sardinella aurita",           "Saurida undosquamis",         "Sciaena umbra",
"Scomber japonicus",          "Scomber scombrus",            "Scophthalmus maximus",        "Scorpaena notata",            "Scyliorhinus canicula",
"Sepia officinalis",           "Seriola dumerili",            "Serranus atricauda",          "Solea solea",                 "Sparus aurata",
"Sphyraena sphyraena",         "Sphyraena viridensis",        "Spicara maena",               "Spicara smaris",              "Spondyliosoma cantharus",
"Sprattus sprattus",           "Squilla mantis",              "Stephanolepis diaspros",      "Thunnus alalunga",            "Thunnus thynnus",
"Trachurus mediterraneus",     "Trachurus picturatus",        "Trachurus trachurus",         "Trachyrincus scabrus",        "Trigla lyra",
"Trisopterus luscus",          "Trisopterus minutus",         "Upeneus moluccensis",         "Xiphias gladius",             "Gobius ophiocephalus",
"Ost euphausiids")
dataset                  <- read.csv(paste0(path, "/output_tot/dataset_phylosem.csv"))
rownames(dataset)        <- dataset$X
dataset_traits           <- read.csv(paste0(path, "/output_tot/dataset_traits_phylosem.csv"))
rownames(dataset_traits) <- dataset_traits$X
dataset                  <- dataset[, -which(grepl("X", colnames(dataset)))]
dataset_traits           <- dataset_traits[, -which(grepl("X", colnames(dataset_traits)))]
dataset_traits <- dataset_traits[,-which(colnames(dataset_traits) %in%
c("eps_m", "AspectRatio", "waterbrack", "watersaltwater", "lengthOffspring"))]
range(dataset$c_m, na.rm = T)
range(dataset_traits$c_m, na.rm = T)
colnames(dataset)
colnames(dataset_traits)
# WITH THE RATIO
boxplot(exp(dataset_traits$Lm)/exp(dataset_traits$Loo))
dataset_traits$Lm <- dataset_traits$Lm-dataset_traits$Loo
boxplot(exp(dataset_traits$tm)*(dataset_traits$M))
dataset_traits$tm <- dataset_traits$tm*dataset_traits$M
dataset_traits
dataset -> dataext
dataset_traits -> dataext_traits
#*Define the SEM model
#*
#*
TLstdmeca = "
habitatbenthopelagic -> c_m, p0
habitatdemersal -> c_m, p1
habitatpelagic -> c_m, p2
Temperature-> K, p3
Temperature-> M, p4
Temperature-> Loo, p5
Loo -> K, p6
Loo -> M, p7
Loo -> Max_body_width, p8
Loo -> Max_body_depth, p9
Loo -> Lower_jaw_length, p10
Loo -> Min_caudalpeduncle_depth, p11
Loo -> Woo, p12
Max_body_depth-> c_m, p13
Max_body_width-> c_m,  p14
Lower_jaw_length-> c_m, p15
Min_caudalpeduncle_depth  -> c_m, p16
Max_body_depth-> TLDiet, p17
Max_body_width-> TLDiet,  p18
Lower_jaw_length-> TLDiet, p19
Min_caudalpeduncle_depth  -> TLDiet, p20
c_m -> K, p21
c_m -> M, p22
c_m -> Woo, p23
K -> Lm, p24
K -> tm, p25
M -> tmax, p26
M -> tm, p27
M -> Lm, p28
Woo -> TLDiet, p29
Woo -> fecundity, p30
"
range(dataext$c_m[!is.na(dataext$c_m)])
range(dataext_traits$c_m[!is.na(dataext_traits$c_m)])
# phylogenetic tree
######
nb         <- dim(dataext)[1]
frm        = ~SuperClass/Class/Order/Family/Genus/Species
phylo      <- c()
phylo      = as.data.frame(dataext[which(names(dataext) %in% c("SuperClass", "Class", "Order", "Family", "Genus", "Species"))], stringsAsFactors = TRUE)
phylo$Species        = stringr::str_replace(phylo$Species, " ", "_")
phylo      <- mutate_if(phylo, is.character, as.factor)
phylo_tree_med             = as.phylo(x = frm, data = phylo, collapse = FALSE, use.labels = TRUE)
dataset <- dataset[-which(is.na(dataset$c_m)), ]
dataset_traits <- dataset_traits[-which(is.na(dataset_traits$c_m)), ]
#*Define the SEM model
#*
#*
TLstdmeca = "
habitatbenthopelagic -> c_m, p0
habitatdemersal -> c_m, p1
habitatpelagic -> c_m, p2
Temperature-> K, p3
Temperature-> M, p4
Temperature-> Loo, p5
Loo -> K, p6
Loo -> M, p7
Loo -> Max_body_width, p8
Loo -> Max_body_depth, p9
Loo -> Lower_jaw_length, p10
Loo -> Min_caudalpeduncle_depth, p11
Loo -> Woo, p12
Max_body_depth-> c_m, p13
Max_body_width-> c_m,  p14
Lower_jaw_length-> c_m, p15
Min_caudalpeduncle_depth  -> c_m, p16
Max_body_depth-> TLDiet, p17
Max_body_width-> TLDiet,  p18
Lower_jaw_length-> TLDiet, p19
Min_caudalpeduncle_depth  -> TLDiet, p20
c_m -> K, p21
c_m -> M, p22
c_m -> Woo, p23
K -> Lm, p24
K -> tm, p25
M -> tmax, p26
M -> tm, p27
M -> Lm, p28
Woo -> TLDiet, p29
Woo -> fecundity, p30
"
range(dataext$c_m[!is.na(dataext$c_m)])
range(dataext_traits$c_m[!is.na(dataext_traits$c_m)])
# phylogenetic tree
######
nb         <- dim(dataext)[1]
frm        = ~SuperClass/Class/Order/Family/Genus/Species
phylo      <- c()
phylo      = as.data.frame(dataext[which(names(dataext) %in% c("SuperClass", "Class", "Order", "Family", "Genus", "Species"))], stringsAsFactors = TRUE)
phylo$Species        = stringr::str_replace(phylo$Species, " ", "_")
phylo      <- mutate_if(phylo, is.character, as.factor)
phylo_tree_med             = as.phylo(x = frm, data = phylo, collapse = FALSE, use.labels = TRUE)
phylo_tree_med$edge.length = rep(1,length(phylo_tree_med$edge))
par(mfrow=c(1,1))
write.tree(phy = phylo_tree_med, file = paste0(path, "/P.tree"), append = FALSE, digits = 10, tree.names = FALSE) # format understood by the *ape* package
P = read.tree(paste0(path, "/P.tree"))
if (any(is.na(P))) {
print("P has NA values - not allowed for")
} else {
print("P looks OK") }
dim(dataset)
dim(dataextet)
dim(dataext)
dataset -> dataext
dataset_traits -> dataext_traits
# phylogenetic tree
######
nb         <- dim(dataext)[1]
frm        = ~SuperClass/Class/Order/Family/Genus/Species
phylo      <- c()
phylo      = as.data.frame(dataext[which(names(dataext) %in% c("SuperClass", "Class", "Order", "Family", "Genus", "Species"))], stringsAsFactors = TRUE)
phylo$Species        = stringr::str_replace(phylo$Species, " ", "_")
phylo      <- mutate_if(phylo, is.character, as.factor)
phylo_tree_med             = as.phylo(x = frm, data = phylo, collapse = FALSE, use.labels = TRUE)
phylo_tree_med$edge.length = rep(1,length(phylo_tree_med$edge))
par(mfrow=c(1,1))
write.tree(phy = phylo_tree_med, file = paste0(path, "/P.tree"), append = FALSE, digits = 10, tree.names = FALSE) # format understood by the *ape* package
P = read.tree(paste0(path, "/P.tree"))
if (any(is.na(P))) {
print("P has NA values - not allowed for")
} else {
print("P looks OK") }
#*
#* RUN MODEL
#*
###########*************PARAMETERS
###########*
#trait = c("c_m") # choose the trait you want to cross validate ****
nbCV <- 10
semID=c(1)
listsem      <- list(TLstdmeca)
max          <- length(rownames(dataext))
IDNA_c_m     <- which(!is.na(dataext_traits$c_m))
IDtot        <- length(dataext_traits$c_m)
max          <- length(IDNA_c_m)/nbCV
maxtot       <- IDtot/nbCV
modelname    <- c("TLstdmeca")
modellist    <-list(TLstdmeca)
matrixCSV    <- matrix("", 2,10)
matrixCSVtot <- matrix("", 2,1)
nameCV       <- c("c_m", "all", "spe")
P$Nnode
dim(dataext)
err <- matrix()
sem <- matrix()
for (semID in semID){
data_CV <- dataext_traits
psem = phylosem(sem = as.character(modellist[[semID]]),
data = data_CV,
tree = P,
family = c(rep("binomial", 3),  rep("fixed", 18) ), #rep("binomial", 11),
estimate_ou = FALSE,
estimate_lambda = FALSE,
estimate_kappa = FALSE,
covs = colnames(data_CV)
# method="BFGS",newtonsteps = 1
)
matrixCSVtot[semID] <-  psem$opt$convergence
assign(paste0("psemFINALtot", "_sem", semID), psem)
# output 1 : dataset completed
df.1 = as_phylo4d(psem)
df.2 = as(df.1, "data.frame")
df.3 = df.2[order(df.2$label),]
df.4 = df.3[df.3$node.type == "tip", ]
df = df.4[,!names(df.4) %in% c("node", "ancestor", "edge.length", "node.type")]
labels  = stringr::str_replace_all(rownames(df), "_", " ")
IDosmose= as.numeric(labels %in% osmosespnames)
df$osmose <- IDosmose
# output 2 : SEM and path coeffients
semmodel = summary(psem)$coefficients
#
# output 3 : std and not std path coefficients
coefnotstd <- coef(psem, standardized =FALSE)
coefstd <- coef(psem, standardized =TRUE)
coef = cbind(coefnotstd, coefstd[,3])
colnames(coef) <- c("Path", "Parameter", "EstimateNotStd", "EstimateStd")
if (file.exists(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "semmodel", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "semmodel", "_", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "MLE", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "MLE", "_", ".csv"))
}
write.csv(semmodel, paste0(pathoutput, "/", "semmodel", "_", modelname[semID],".csv"))
write.csv(coef, paste0(pathoutput, "/", "coefnostd_std", "_", modelname[semID],".csv"))
write.csv(df, paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
# output4 : only OSMOSE values
write.csv(df[IDosmose, c("c_m")], paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
#* PLOT SEM WITH CORRELATION
#*
my_fitted_DAG = as_fitted_DAG(psem)
coef_plot( my_fitted_DAG, error_bar = "se")
pdf(file=paste0(pathoutput, "/", modelname[semID], "SEM_DEG.pdf"), paper='a4r', width=200)
plt <- plot(my_fitted_DAG, las = 2 )
print(plt)
dev.off()
}
pathoutput <- c("~/osmose/updated_parameters_osmose-med/Mass_specific_maintenance_dataset_building/01-Simulations/Outputs/test_nobinom")
data_CV
colnames(data_CV)
for (semID in semID){
data_CV <- dataext_traits
psem = phylosem(sem = as.character(modellist[[semID]]),
data = data_CV,
tree = P,
family = c(rep("fixed", 18)),
# family = c(rep("binomial", 3),  rep("fixed", 18) ), #rep("binomial", 11),
estimate_ou = FALSE,
estimate_lambda = FALSE,
estimate_kappa = FALSE,
covs = colnames(data_CV)
# method="BFGS",newtonsteps = 1
)
matrixCSVtot[semID] <-  psem$opt$convergence
assign(paste0("psemFINALtot", "_sem", semID), psem)
# output 1 : dataset completed
df.1 = as_phylo4d(psem)
df.2 = as(df.1, "data.frame")
df.3 = df.2[order(df.2$label),]
df.4 = df.3[df.3$node.type == "tip", ]
df = df.4[,!names(df.4) %in% c("node", "ancestor", "edge.length", "node.type")]
labels  = stringr::str_replace_all(rownames(df), "_", " ")
IDosmose= as.numeric(labels %in% osmosespnames)
df$osmose <- IDosmose
# output 2 : SEM and path coeffients
semmodel = summary(psem)$coefficients
#
# output 3 : std and not std path coefficients
coefnotstd <- coef(psem, standardized =FALSE)
coefstd <- coef(psem, standardized =TRUE)
coef = cbind(coefnotstd, coefstd[,3])
colnames(coef) <- c("Path", "Parameter", "EstimateNotStd", "EstimateStd")
if (file.exists(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "semmodel", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "semmodel", "_", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "MLE", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "MLE", "_", ".csv"))
}
write.csv(semmodel, paste0(pathoutput, "/", "semmodel", "_", modelname[semID],".csv"))
write.csv(coef, paste0(pathoutput, "/", "coefnostd_std", "_", modelname[semID],".csv"))
write.csv(df, paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
# output4 : only OSMOSE values
write.csv(df[IDosmose, c("c_m")], paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
#* PLOT SEM WITH CORRELATION
#*
my_fitted_DAG = as_fitted_DAG(psem)
coef_plot( my_fitted_DAG, error_bar = "se")
pdf(file=paste0(pathoutput, "/", modelname[semID], "SEM_DEG.pdf"), paper='a4r', width=200)
plt <- plot(my_fitted_DAG, las = 2 )
print(plt)
dev.off()
}
pathoutput <- c("~/osmose/updated_parameters_osmose-med/Mass_specific_maintenance_dataset_building/01-Simulations/Outputs/test_nobinom")
err <- matrix()
sem <- matrix()
for (semID in semID){
data_CV <- dataext_traits
psem = phylosem(sem = as.character(modellist[[semID]]),
data = data_CV,
tree = P,
family = c(rep("fixed", 18)),
# family = c(rep("binomial", 3),  rep("fixed", 18) ), #rep("binomial", 11),
estimate_ou = FALSE,
estimate_lambda = FALSE,
estimate_kappa = FALSE,
covs = colnames(data_CV)
# method="BFGS",newtonsteps = 1
)
matrixCSVtot[semID] <-  psem$opt$convergence
assign(paste0("psemFINALtot", "_sem", semID), psem)
# output 1 : dataset completed
df.1 = as_phylo4d(psem)
df.2 = as(df.1, "data.frame")
df.3 = df.2[order(df.2$label),]
df.4 = df.3[df.3$node.type == "tip", ]
df = df.4[,!names(df.4) %in% c("node", "ancestor", "edge.length", "node.type")]
labels  = stringr::str_replace_all(rownames(df), "_", " ")
IDosmose= as.numeric(labels %in% osmosespnames)
df$osmose <- IDosmose
# output 2 : SEM and path coeffients
semmodel = summary(psem)$coefficients
#
# output 3 : std and not std path coefficients
coefnotstd <- coef(psem, standardized =FALSE)
coefstd <- coef(psem, standardized =TRUE)
coef = cbind(coefnotstd, coefstd[,3])
colnames(coef) <- c("Path", "Parameter", "EstimateNotStd", "EstimateStd")
if (file.exists(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "semmodel", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "semmodel", "_", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "MLE", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "MLE", "_", ".csv"))
}
write.csv(semmodel, paste0(pathoutput, "/", "semmodel", "_", modelname[semID],".csv"))
write.csv(coef, paste0(pathoutput, "/", "coefnostd_std", "_", modelname[semID],".csv"))
write.csv(df, paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
# output4 : only OSMOSE values
write.csv(df[IDosmose, c("c_m")], paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
#* PLOT SEM WITH CORRELATION
#*
my_fitted_DAG = as_fitted_DAG(psem)
coef_plot( my_fitted_DAG, error_bar = "se")
pdf(file=paste0(pathoutput, "/", modelname[semID], "SEM_DEG.pdf"), paper='a4r', width=200)
plt <- plot(my_fitted_DAG, las = 2 )
print(plt)
dev.off()
}
pathoutput <- c("~/osmose/updated_parameters_osmose-med/Mass_specific_maintenance_dataset_building/01-Simulations/Outputs/test")
err <- matrix()
sem <- matrix()
for (semID in semID){
data_CV <- dataext_traits
psem = phylosem(sem = as.character(modellist[[semID]]),
data = data_CV,
tree = P,
# family = c(rep("fixed", 18)),
family = c(rep("binomial", 3),  rep("fixed", 18) ), #rep("binomial", 11),
estimate_ou = FALSE,
estimate_lambda = FALSE,
estimate_kappa = FALSE,
covs = colnames(data_CV)
# method="BFGS",newtonsteps = 1
)
matrixCSVtot[semID] <-  psem$opt$convergence
assign(paste0("psemFINALtot", "_sem", semID), psem)
# output 1 : dataset completed
df.1 = as_phylo4d(psem)
df.2 = as(df.1, "data.frame")
df.3 = df.2[order(df.2$label),]
df.4 = df.3[df.3$node.type == "tip", ]
df = df.4[,!names(df.4) %in% c("node", "ancestor", "edge.length", "node.type")]
labels  = stringr::str_replace_all(rownames(df), "_", " ")
IDosmose= as.numeric(labels %in% osmosespnames)
df$osmose <- IDosmose
# output 2 : SEM and path coeffients
semmodel = summary(psem)$coefficients
#
# output 3 : std and not std path coefficients
coefnotstd <- coef(psem, standardized =FALSE)
coefstd <- coef(psem, standardized =TRUE)
coef = cbind(coefnotstd, coefstd[,3])
colnames(coef) <- c("Path", "Parameter", "EstimateNotStd", "EstimateStd")
if (file.exists(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))){
file.remove(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "semmodel", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "semmodel", "_", ".csv"))
}
if (file.exists(paste0(pathoutput, "/", "MLE", "_", ".csv"))){
file.remove(paste0(pathoutput, "/", "MLE", "_", ".csv"))
}
write.csv(semmodel, paste0(pathoutput, "/", "semmodel", "_", modelname[semID],".csv"))
write.csv(coef, paste0(pathoutput, "/", "coefnostd_std", "_", modelname[semID],".csv"))
write.csv(df, paste0(pathoutput, "/", "output", "_", modelname[semID], "psemFINALtot", ".csv"))
# output4 : only OSMOSE values
write.csv(df[IDosmose, c("c_m")], paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
#* PLOT SEM WITH CORRELATION
#*
my_fitted_DAG = as_fitted_DAG(psem)
coef_plot( my_fitted_DAG, error_bar = "se")
pdf(file=paste0(pathoutput, "/", modelname[semID], "SEM_DEG.pdf"), paper='a4r', width=200)
plt <- plot(my_fitted_DAG, las = 2 )
print(plt)
dev.off()
}
CVconverged <- c(matrixCSV[1,], matrixCSV[2,], matrixCSVtot[1,], matrixCSVtot[2,])
CVconv <- data.frame(CVconverged)
CVconv
matrixCSV[1,]
matrixCSV[2,]
matrixCSVtot[1,]
matrixCSVtot[2,]
CVconv <- data.frame(CVconverged)
psem$opt
matrixCSVtot[semID] <-  psem$opt$message
CVconverged <- c(matrixCSV[1,], matrixCSV[2,], matrixCSVtot[1,], matrixCSVtot[2,])
CVconv <- data.frame(CVconverged)
write.csv(CVconv, paste0(pathoutput, "/CSVconverged", ".csv"))
CVconv
save.image(file=paste0(pathoutput, "/", "imageworkspaceEND.RData"))
#RUN cross validation
load(file=paste0(pathoutput, "/", "imageworkspaceEND.RData"))
source(paste0(path, "/functionsphylosem.R"))
