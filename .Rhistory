#  DATASET OSMOSE
#include only species that have data for c_m and eps_m or species from osmose
dataset_osm      <- dataset
rownames(dataset_osm) <- dataset$Species
dataset_ID       <- which(rownames(dataset_osm) %in% osmosespnames)
dataset_ID_gen   <- which(dataset_osm$Genus %in% dataset_osm$Genus[dataset_ID])
dataosmose       <- dataset_osm[dataset_ID_gen, ]
datatoadd        <- dataset_osm[-dataset_ID_gen,]
datatoadd        <- datatoadd[which(!is.na(datatoadd$c_m)), ]
dataset_GE_ge    <- rbind(datatoadd, dataosmose)
#create dataset_trait dataset with only the data needed for phylosem, without taxonomy
#osmose data : all genus matching with osmose data
dataset_traits_GE_ge <- dataset_GE_ge[, sapply(dataset_GE_ge, is.numeric)]
dataset_traits_GE_ge <- dataset_traits_GE_ge[,-which(names(dataset_traits_GE_ge)==c("SpecCode"))]
dataosmose       <- dataset_osm[dataset_ID, ]
datatoadd        <- dataset_osm[-dataset_ID,]
datatoadd        <- datatoadd[which(!is.na(datatoadd$c_m)), ]
dataset_GE       <- rbind(datatoadd, dataosmose)
#create dataset_trait dataset with only the data needed for phylosem, without taxonomy
#osmose data : only species from osmose
dataset_traits_GE <- dataset_GE[, sapply(dataset_GE, is.numeric)]
dataset_traits_GE <- dataset_traits_GE[,-which(names(dataset_traits_GE)==c("SpecCode"))]
##############################################################################################
#    VISUALIZE DATA
##############################################################################################
# plot the number of NAs
namena2 <- c()
na2 <- c()
j2=0
for (i in 1:dim(dataset_traits_TOT)[2]){
j2=j2+1
namena2[j2] <- colnames(dataset_traits_TOT[i])
na2[j2] <- sum(is.na(dataset_traits_TOT[i]))
}
dataframe_na <- data.frame(namena2, na2)
ordna <- order(dataframe_na$na2)
a<-ggplot(dataframe_na, aes(x = namena2, y = na2)) +
geom_col() +
geom_text(aes(label = na2), vjust = -0.5, size = 4)+
ylab("Number of NAs in dataset complete")
namena2 <- c()
na2 <- c()
j2=0
for (i in 1:dim(dataset_traits_GE)[2]){
j2=j2+1
namena2[j2] <- colnames(dataset_traits_GE[i])
na2[j2] <- sum(is.na(dataset_traits_GE[i]))
}
dataframe_na <- data.frame(namena2, na2)
ordna <- order(dataframe_na$na2)
b<-ggplot(dataframe_na, aes(x = namena2, y = na2)) +
geom_col() +
geom_text(aes(label = na2), vjust = -0.5, size = 4)+
ylab("Number of NAs in dataset for OSMOSE")
d<-ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO",  common.legend = TRUE, legend="right")
ggsave(d, filename=paste0(pathoutput, "/plot_03/", "boxplot_NAsLOG.png"), width=c(30), height =c(15))
# count NAs per family
namena <- c()
na <- c()
na_cm <- c()
nb_fam <- c()
j=0
for (i in seq_along(table(dataset_GE$Family))){
j=j+1
namena[j] <- names(table(dataset_GE$Family))[i]
nb_fam <- length(which(dataset_GE$Family == namena[j]))
na[j] <- sum(is.na(dataset_GE[which(dataset_GE$Family == namena[j]), ]))/(nb_fam*dim(dataset_GE)[2])
na_cm[j] <- sum(is.na(dataset_GE$c_m[which(dataset_GE$Family == namena[j])]))/nb_fam
}
dataframe_na <- data.frame(namena, na, na_cm)
ordna <- order(dataframe_na$na)
b<-ggplot(dataframe_na, aes(x = namena, y = na)) +
geom_col() +
geom_text(aes(label = na), vjust = -0.5, size = 4)+
ylab("% of NAs per family")
c<-ggplot(dataframe_na, aes(x = namena, y = na_cm)) +
geom_col() +
geom_text(aes(label = na_cm), vjust = -0.5, size = 4)+
ylab("% of NAs in c_m per family")
ggsave(b, filename=paste0(pathoutput, "/plot_03/", "boxplot_NAs_perfamily_GELOG.png"), width=c(30), height =c(15))
ggsave(c, filename=paste0(pathoutput, "/plot_03/", "boxplot_c_m_NAs_perfamily_GELOG.png"), width=c(30), height =c(15))
# count NAs per family
namena <- c()
na <- c()
na_cm <- c()
nb_fam <- c()
j=0
for (i in seq_along(table(dataset_TOT$Family))){
j=j+1
namena[j] <- names(table(dataset_TOT$Family))[i]
nb_fam <- length(which(dataset_TOT$Family == namena[j]))
na[j] <- sum(is.na(dataset_TOT[which(dataset_TOT$Family == namena[j]), ]))/(nb_fam*dim(dataset_TOT)[2])
na_cm[j] <- sum(is.na(dataset_TOT$c_m[which(dataset_TOT$Family == namena[j])]))/nb_fam
}
dataframe_na <- data.frame(namena, na, na_cm)
ordna <- order(dataframe_na$na)
b<-ggplot(dataframe_na, aes(x = namena, y = na)) +
geom_col() +
geom_text(aes(label = na), vjust = -0.5, size = 4)+
ylab("% of NAs per family")
c<-ggplot(dataframe_na, aes(x = namena, y = na_cm)) +
geom_col() +
geom_text(aes(label = na_cm), vjust = -0.5, size = 4)+
ylab("% of NAs in c_m per family")
ggsave(b, filename=paste0(pathoutput, "/plot_03/", "boxplot_NAs_perfamily_TOTLOG.png"), width=c(30), height =c(15))
ggsave(c, filename=paste0(pathoutput, "/plot_03/", "boxplot_c_m_NAs_perfamily_TOTLOG.png"), width=c(30), height =c(15))
#osmose species witha value for c_m and eps_m
dataset_GE$Species[which(dataset_GE$Species[!is.na(dataset_GE$c_m)] %in% osmosespnames)]
sum(is.na(dataset_GE$c_m))
sum(is.na(dataset_GE$eps_m))
##############################################################################################
#    OUTPUT
##############################################################################################
##############
# write a csv file with this output
##############
options("scipen")
dir.create(paste0(pathoutput, "/dataset_for_phylosem/output_genus_stdmorpho"), showWarnings = F, recursive = T)
dir.create(paste0(pathoutput, "/dataset_for_phylosem/output_tot_stdmorpho"), showWarnings = F, recursive = T)
write.csv(dataset_GE, paste0(pathoutput, "/dataset_for_phylosem/output_genus_stdmorpho/dataset_phylosem.csv"))
write.csv(dataset_traits_GE, paste0(pathoutput, "/dataset_for_phylosem/output_genus_stdmorpho/dataset_traits_phylosem.csv"))
write.csv(dataset_TOT, paste0(pathoutput, "/dataset_for_phylosem/output_tot_stdmorpho/dataset_phylosem.csv"))
write.csv(dataset_traits_TOT, paste0(pathoutput, "/dataset_for_phylosem/output_tot_stdmorpho/dataset_traits_phylosem.csv"))
save.image( paste0(pathoutput, "/dataset_for_phylosem/IMAGELOG.RData"))
##############################################################################################
setwd("C:/Users/mbeneat/Documents/osmose/parameterizing_ev-osmose-med/tests/repository_for_zenodo")
load(paste0(getwd(), "/01-Simulations/Outputs/phylosem_output/imageworkspaceEND.RData")) #data needed for cross validation
path_plots <- paste0(getwd(), "/02-Analysis/Outputs")
pathoutput_CV <- path_plots
path_CV <- paste0(getwd(), "/01-Simulations/Outputs/phylosem_output")
source(paste0(getwd(), "/02-Analysis/Scripts/00-Functions_for_analysis.R"))
semID=1
p <- plot_checkphylosemdata(semID, trait="c_m", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(MSM)")
p2 <- plot_checkphylosemdata(semID, trait="tm", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Maturation age)")
p3 <- plot_checkphylosemdata(semID, trait="Lm", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Maturation length)")
p4 <- plot_checkphylosemdata(semID, trait="tmax", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Max age)")
p5 <- plot_checkphylosemdata(semID, trait="K", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="K")
ph1 <- plot_checkphylosemdata(semID, trait="habitatbenthopelagic", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="Benthopelagic")
p6 <- plot_checkphylosemdata(semID, trait="Woo", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Infinite weight)")
p1 <- plot_checkphylosemdata(semID, trait="Loo", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Infinite length)")
p7 <- plot_checkphylosemdata(semID, trait="M", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="Mortality")
p8 <- plot_checkphylosemdata(semID, trait="TLDiet", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="Trophic level")
p9 <- plot_checkphylosemdata(semID, trait="fecundity", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Fecundity)")
ph2 <- plot_checkphylosemdata(semID, trait="habitatdemersal", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="Demersal")
p10 <- plot_checkphylosemdata(semID, trait="Min_caudalpeduncle_depth", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Peduncle depth)")
p11 <- plot_checkphylosemdata(semID, trait="Lower_jaw_length", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Jaw length)")
p12 <- plot_checkphylosemdata(semID, trait="Max_body_depth", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Body depth)")
p13 <- plot_checkphylosemdata(semID, trait="Max_body_width", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Body width)")
p14 <- plot_checkphylosemdata(semID, trait="Temperature", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="log(Temperature)")
ph3<- plot_checkphylosemdata(semID, trait="habitatpelagic", name=nameCV[2],
sample=list(sampletot$sample),
maxCV=list(sampletot$maxCV), names_var="Pelagic ")
library(patchwork)
design <- "
112222
112222
332222
"
final<-p+
(p1+p2+p3+p4+p5+p6+p7+p8+p9+p10+p11+p12+p13+p14 + plot_layout(ncol = 4, nrow=4, guides = "collect")) +
((ph1+ ph2 + ph3 + plot_layout(ncol=2, nrow=2, guides = "collect"))) +
plot_layout(guides = "collect", design=design)   # guide_area() +
grDevices::pdf(file=paste0(pathoutput_CV, "/plot/", modelname[sem], name, "plotarrangedCV_clean.pdf"), height=9, width=15.37)
print(final)
dev.off()
t.test(dataphylo$c_m[which(dataphylo$Class == "Teleostei"], dataphylo$c_m[!which(dataphylo$Class == "Teleostei"])
t.test(dataphylo$c_m[which(dataphylo$Class == "Teleostei"], dataphylo$c_m[!which(dataphylo$Class == "Teleostei"])
dataphylo$c_m[!which(dataphylo$Class == "Teleostei"]
dataphylo$c_m[-which(dataphylo$Class == "Teleostei"]
dataphylo$c_m
t.test(dataphylo$c_m[which(dataphylo$Class == "Teleostei")], dataphylo$c_m[!which(dataphylo$Class == "Teleostei")])
ataphylo$c_m[which(dataphylo$Class == "Teleostei")]
dataphylo$c_m[which(dataphylo$Class == "Teleostei")]
dataphylo$c_m[-which(dataphylo$Class == "Teleostei")]
t.test(dataphylo$c_m[which(dataphylo$Class == "Teleostei")], dataphylo$c_m[!which(dataphylo$Class == "Teleostei")])
length(dataphylo$c_m[!which(dataphylo$Class == "Teleostei")])
t.test(dataphylo$c_m[which(dataphylo$Class == "Teleostei")], dataphylo$c_m[-which(dataphylo$Class == "Teleostei")])
# creating the PCA and the data frames associated
PCAelasmo <- runPCA(dataplot_noteleo_2, traits_2)
#PCAelasmo <- runPCA(dataplot_noteleo_2[, traits_2], scale.unit = TRUE)
plot(PCAelasmo$x[,1], PCAelasmo$x[,2])
plot(PCAelasmo)
res.pca <- PCAelasmo
# res.pca <- PCA(beta_iv1_tot)
dataacp_noteleoPLOT <- dataacp_add_colorvector(dataphylo_noteleo_2, kclusters=10, dataacp_noteleo_2)
listforplot <- preparedataforplot(numbPCA1=1, numbPCA2=2, dataacp=dataacp_noteleoPLOT, AA=AAelasmo_2, PCA=PCAelasmo)
rotation = listforplot[[1]]
matrixAAinPCA = listforplot[[2]]
dataacpPLOT = listforplot[[3]]
dataacpPLOT = dataacpPLOT[, !duplicated(t(dataacpPLOT))]
eigenval = listforplot[[4]]
# dataacpPLOT = dataacpPLOT[, !duplicated(t(dataacpPLOT))] # species data and position in PCA and clusters
# loading the data for the pictures
# periodic_uuid <- get_uuid(name = "mugilidae")
# periodic_pic <- get_phylopic(uuid = periodic_uuid)
# elasmo_uuid <- get_uuid(name = "Squalidae", n=2)
# elasmo_pic <- get_phylopic(uuid = elasmo_uuid[2])
# opp_uuid <- get_uuid(name = "Gobiidae", n=5)
# opp_pic <- get_phylopic(uuid = opp_uuid[3])
# preparing the data for the Archetypes identifications
datatoadd <- matrixAAinPCA[,1:2]
rownames(datatoadd)<- NULL
# labels <- c("Benthopelagic", "Pelagic", "Demersal")
datatoadd <- data_frame(x=datatoadd[,1], y=datatoadd[,2], z=labels)
AXESTOREPRESENT = c(1,2)
# creating the PCA and the data frames associated
PCAtot <- runPCA(dataplot_2, traits_2)
plot(PCAtot$x[,AXESTOREPRESENT[1]], PCAtot$x[,AXESTOREPRESENT[2]])
plot(PCAtot)
res.pca <- PCAtot
plot(PCAtot)
dataacp_totPLOT <- dataacp_add_colorvector(dataphylo = dataphylo_2, kclusters=6, dataacp = dataacp_2)
clusterscentroids <- dataacp_totPLOT[2][[1]]
listforplot <- preparedataforplot(numbPCA1=AXESTOREPRESENT[1], numbPCA2=AXESTOREPRESENT[2],
dataacp=dataacp_totPLOT, AA=AAtot_2, PCA=PCAtot)
rotation = listforplot[[1]]
matrixAAinPCA = listforplot[[2]]
dataacpPLOT = listforplot[[3]]
dataacpPLOT = dataacpPLOT[, !duplicated(t(dataacpPLOT))]
eigenval = listforplot[[4]]
# dataacpPLOT = dataacpPLOT[, !duplicated(t(dataacpPLOT))] # species data and position in PCA and clusters
# loading the data for the pictures
periodic_uuid <- get_uuid(name = "Sarpa salpa")
periodic_pic <- get_phylopic(uuid = periodic_uuid)
elasmo_uuid <- get_uuid(name = "Squalus suckleyi")
elasmo_pic <- get_phylopic(uuid = elasmo_uuid)
opp_uuid <- get_uuid(name = "Amblyeleotris guttata") # gobiidae
opp_pic <- get_phylopic(uuid = opp_uuid)
plot(opp_pic)
# preparing the data for the Archetypes identifications
datatoadd <- matrixAAinPCA[,AXESTOREPRESENT]
rownames(datatoadd)<- NULL
labels <- c("Equilibrium", "Periodic", "Opportunistic") #c("Equilibrium", "Periodic", "Opportunistic")
datatoadd <- data_frame(x=datatoadd[,1], y=datatoadd[,2], z=labels)
# prepare the data for the arrows indentification
rownames(res.pca$rotation) <- c("Amat", "Amax", "M", "K", "Tlvl", "Hab")
# plot
mycol = c("darkorchid4", "cyan3", "#4575b4", "#91bfdb", "#fee090", "#fc8d59","#d73027", "white", "midnightblue")#
#("darkorchid4", "#4575b4", "#fee090", "#fc8d59") #"#fee090", 91bfdb "#"d73027d73027
plot <- fviz_pca_biplot(res.pca, axes = AXESTOREPRESENT,
label = c("var"), # label = "none" for individual labels
habillage = , # color by groups
col.ind = as.factor(round(dataacpPLOT$colACP, 2)),
pointshape = 19, alpha = 0.5,
pointsize = 1.5, labelsize = 5,
arrowsize = 1.5,
col.var = "midnightblue",
# col.var = c("  ", "  ","  ","  ","  ", ""),
repel = T
# ,
# show.legend = c(F, F,F, F,F,F)
) +  # Suppression de la légende des flèches
geom_mark_ellipse(aes(fill = as.factor(dataacpPLOT$Class),
linetype = as.factor(dataacpPLOT$Class)),
expand = unit(0.5, "mm"), alpha = 0) +
scale_colour_manual(values = mycol, name = "MSM cluster \ncentroid") +  # Ajustement de la couleur
# geom_text(data = datatoadd, aes(x = x + 0.1, y = y -c(0.4, 0.8, 0.4), label = z),
#           color = "black", size = 4.5, fontface = "bold") +
geom_point(data = datatoadd, aes(x = x, y = y), pch=c(23,21,22),
fill = c("royalblue", "#00b159", "tomato"), size = 6,
stroke = 1) +
geom_point(data = res.pca$x[c(which(dataacp$Species %in% c("Amblyeleotris guttata", "Squalus suckleyi", "Sarpa salpa"))),],
aes(x = PC1, y = PC2),
pch = 8, color = "red", size = 5) +
ggtitle(NULL) +
theme(text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
legend.key = element_blank()) +
add_phylopic(periodic_pic, alpha = 1, x = as.numeric(datatoadd[2, 1]*1.3),
y = as.numeric(datatoadd[2, 2]*1.3), ysize = 0.4) +
add_phylopic(elasmo_pic, alpha = 1, x = as.numeric(datatoadd[1, 1]*1.3),
y = as.numeric(datatoadd[1, 2]*1.3), ysize = 0.4) +
add_phylopic(opp_pic, alpha = 1, x = as.numeric(datatoadd[3, 1]*1.3),
y = as.numeric(datatoadd[3, 2]*1.3), ysize = 0.4) +
scale_linetype_manual(values = c("solid", "dotted")) +
guides(linetype = guide_legend("Class"), fill="none",
point = guide_legend(override.aes=list(fill=c(mycol[1:4], "white", "white"))))
plot
pdf(file = paste0(path_plots, "/PCA_tot_time.pdf"))
plot
dev.off()
save(plot, file=paste0(path_plots, "/TOT_PCA_time.RData"))
load(file=paste0(path_plots, "/ELASMO_PCA_time.RData"))
load(file=paste0(path_plots, "/ELASMO_PCA_time.RData"))
elasmo <- plot
load(file=paste0(path_plots, "/TELEO_PCA_time.RData"))
teleo <- plot
path_plots
setwd("C:/Users/mbeneat/Documents/osmose/parameterizing_ev-osmose-med/tests/repository_for_zenodo")
path_plots <- paste0(getwd(), "/02-Analysis/Outputs/plots")
load(paste0(getwd(), "/02-Analysis/Outputs/IMAGETOT_STD_Log_BodyDepth.RData"))
source(paste0(getwd(), "/02-Analysis/Scripts/00-Functions_for_analysis.R"))
load(file=paste0(path_plots, "/ELASMO_PCA_time.RData"))
elasmo <- plot
load(file=paste0(path_plots, "/TELEO_PCA_time.RData"))
teleo <- plot
load(file=paste0(path_plots, "/TOT_PCA_time.RData"))
tot <- plot
plotall <- ggarrange(tot, teleo, NA, elasmo, labels = c("A","B","", "C"))
ggsave(file = paste0(path_plots, "/PCA_combined_time.pdf"), width=13, height=9.5)
plotall
# creating the PCA and the data frames associated
PCAelasmo <- runPCA(dataplot_noteleo_2, traits_2)
#PCAelasmo <- runPCA(dataplot_noteleo_2[, traits_2], scale.unit = TRUE)
plot(PCAelasmo$x[,1], PCAelasmo$x[,2])
plot(PCAelasmo)
res.pca <- PCAelasmo
# res.pca <- PCA(beta_iv1_tot)
dataacp_noteleoPLOT <- dataacp_add_colorvector(dataphylo_noteleo_2, kclusters=10, dataacp_noteleo_2)
listforplot <- preparedataforplot(numbPCA1=1, numbPCA2=2, dataacp=dataacp_noteleoPLOT, AA=AAelasmo_2, PCA=PCAelasmo)
rotation = listforplot[[1]]
matrixAAinPCA = listforplot[[2]]
dataacpPLOT = listforplot[[3]]
dataacpPLOT = dataacpPLOT[, !duplicated(t(dataacpPLOT))]
eigenval = listforplot[[4]]
# dataacpPLOT = dataacpPLOT[, !duplicated(t(dataacpPLOT))] # species data and position in PCA and clusters
# loading the data for the pictures
# periodic_uuid <- get_uuid(name = "mugilidae")
# periodic_pic <- get_phylopic(uuid = periodic_uuid)
# elasmo_uuid <- get_uuid(name = "Squalidae", n=2)
# elasmo_pic <- get_phylopic(uuid = elasmo_uuid[2])
# opp_uuid <- get_uuid(name = "Gobiidae", n=5)
# opp_pic <- get_phylopic(uuid = opp_uuid[3])
# preparing the data for the Archetypes identifications
datatoadd <- matrixAAinPCA[,1:2]
rownames(datatoadd)<- NULL
# labels <- c("Benthopelagic", "Pelagic", "Demersal")
datatoadd <- data_frame(x=datatoadd[,1], y=datatoadd[,2], z=labels)
# prepare the data for the arrows indentification
rownames(res.pca$rotation) <- c("Amat", "Amax", "M", "K", "Tlvl", "Hab")
# plot
mycol =  c("darkorchid4", "#4575b4", "#fee090", "#fc8d59") #c("darkorchid4", "#4575b4", "#fee090", "#fc8d59") #c("darkorchid4", "#4575b4", "#91bfdb", "#fc8d59","#d73027")
plot <- fviz_pca_biplot(res.pca, axes = c(1,3),
label = c("var"),# label = "none", # hide individual labels
habillage = , # color by groups
# palette = c("darkblue", "royalblue", "#00AFBB", "lightblue", "#E7B800", "#FC4E07", "darkred"),
# col.ind = dataacpPLOT$c_m, #as.factor(round(dataacpPLOT$colACP, 2)),
#* gradient.cols = mycol,#
# col.ind = as.factor(round(dataacpPLOT$colACP, 2)),
col.ind= dataacpPLOT$c_m,
arrowsize = 1.5, pointshape=19,labelsize = 5,
col.var = "grey14", alpha = 0.5, repel= T)+
# scale_colour_viridis_c(direction = -1, name="Continuous\nMSM color\ngradient") +  # Adjust the color scale
# scale_colour_manual(values = mycol, name="MSM cluster \ncentroid")+ #*
scale_colour_gradient(
low = "#4575b4",
high = "red",
name="MSM color gradient"
)+
# geom_text(data = datatoadd, aes(x = x + 0.1, y = y - 0.4, label = z),
#           color = "black", size = 4.5, fontface = "bold") +
# geom_point(data = datatoadd, aes(x = x, y = y),
#            color = c("#00b159", "tomato", "royalblue"), size = 6,
#            stroke = 1, fill = "white") +
ggtitle(NULL) +
theme(text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
legend.key = element_blank(),
# legend.position = 'none'
) +
# xlim(-6,2)+
# Manually adjust line types to match ellipses
scale_linetype_manual(values = c("solid", "dotted")) +
# Manually adjust the guide to show the ellipse shapes and lines
guides(fill = "none",
linetype = guide_legend("Class"))
# color = guide_legend(override.aes = list(fill = NA)))
plot
pdf(file = paste0(path_plots, "/PCA_elasmo_time.pdf"), width=3.14961, height=3.14961)
plot
dev.off()
AXESTOREPRESENT = c(1,2)
# creating the PCA and the data frames associated
PCAtot <- runPCA(dataplot_2, traits_2)
plot(PCAtot$x[,AXESTOREPRESENT[1]], PCAtot$x[,AXESTOREPRESENT[2]])
plot(PCAtot)
res.pca <- PCAtot
plot(PCAtot)
dataacp_totPLOT <- dataacp_add_colorvector(dataphylo = dataphylo_2, kclusters=6, dataacp = dataacp_2)
clusterscentroids <- dataacp_totPLOT[2][[1]]
listforplot <- preparedataforplot(numbPCA1=AXESTOREPRESENT[1], numbPCA2=AXESTOREPRESENT[2],
dataacp=dataacp_totPLOT, AA=AAtot_2, PCA=PCAtot)
rotation = listforplot[[1]]
matrixAAinPCA = listforplot[[2]]
dataacpPLOT = listforplot[[3]]
dataacpPLOT = dataacpPLOT[, !duplicated(t(dataacpPLOT))]
eigenval = listforplot[[4]]
# dataacpPLOT = dataacpPLOT[, !duplicated(t(dataacpPLOT))] # species data and position in PCA and clusters
# loading the data for the pictures
periodic_uuid <- get_uuid(name = "Sarpa salpa")
periodic_pic <- get_phylopic(uuid = periodic_uuid)
elasmo_uuid <- get_uuid(name = "Squalus suckleyi")
elasmo_pic <- get_phylopic(uuid = elasmo_uuid)
opp_uuid <- get_uuid(name = "Amblyeleotris guttata") # gobiidae
opp_pic <- get_phylopic(uuid = opp_uuid)
plot(opp_pic)
# preparing the data for the Archetypes identifications
datatoadd <- matrixAAinPCA[,AXESTOREPRESENT]
rownames(datatoadd)<- NULL
labels <- c("Equilibrium", "Periodic", "Opportunistic") #c("Equilibrium", "Periodic", "Opportunistic")
datatoadd <- data_frame(x=datatoadd[,1], y=datatoadd[,2], z=labels)
# prepare the data for the arrows indentification
rownames(res.pca$rotation) <- c("Amat", "Amax", "M", "K", "Tlvl", "Hab")
# plot
mycol = c("darkorchid4", "cyan3", "#4575b4", "#91bfdb", "#fee090", "#fc8d59","#d73027", "white", "midnightblue")#
#("darkorchid4", "#4575b4", "#fee090", "#fc8d59") #"#fee090", 91bfdb "#"d73027d73027
plot <- fviz_pca_biplot(res.pca, axes = AXESTOREPRESENT,
label = c("var"), # label = "none" for individual labels
habillage = , # color by groups
col.ind = as.factor(round(dataacpPLOT$colACP, 2)),
pointshape = 19, alpha = 0.5,
pointsize = 1.5, labelsize = 5,
arrowsize = 1.5,
col.var = "midnightblue",
# col.var = c("  ", "  ","  ","  ","  ", ""),
repel = T
# ,
# show.legend = c(F, F,F, F,F,F)
) +  # Suppression de la légende des flèches
geom_mark_ellipse(aes(fill = as.factor(dataacpPLOT$Class),
linetype = as.factor(dataacpPLOT$Class)),
expand = unit(0.5, "mm"), alpha = 0) +
scale_colour_manual(values = mycol, name = "MSM cluster \ncentroid") +  # Ajustement de la couleur
# geom_text(data = datatoadd, aes(x = x + 0.1, y = y -c(0.4, 0.8, 0.4), label = z),
#           color = "black", size = 4.5, fontface = "bold") +
geom_point(data = datatoadd, aes(x = x, y = y), pch=c(23,21,22),
fill = c("royalblue", "#00b159", "tomato"), size = 6,
stroke = 1) +
geom_point(data = res.pca$x[c(which(dataacp$Species %in% c("Amblyeleotris guttata", "Squalus suckleyi", "Sarpa salpa"))),],
aes(x = PC1, y = PC2),
pch = 8, color = "red", size = 5) +
ggtitle(NULL) +
theme(text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
legend.key = element_blank()) +
add_phylopic(periodic_pic, alpha = 1, x = as.numeric(datatoadd[2, 1]*1.3),
y = as.numeric(datatoadd[2, 2]*1.3), ysize = 0.4) +
add_phylopic(elasmo_pic, alpha = 1, x = as.numeric(datatoadd[1, 1]*1.3),
y = as.numeric(datatoadd[1, 2]*1.3), ysize = 0.4) +
add_phylopic(opp_pic, alpha = 1, x = as.numeric(datatoadd[3, 1]*1.3),
y = as.numeric(datatoadd[3, 2]*1.3), ysize = 0.4) +
scale_linetype_manual(values = c("solid", "dotted")) +
guides(linetype = guide_legend("Class"), fill="none",
point = guide_legend(override.aes=list(fill=c(mycol[1:4], "white", "white"))))
plot
pdf(file = paste0(path_plots, "/PCA_tot_time.pdf"))
plot
dev.off()
save(plot, file=paste0(path_plots, "/TOT_PCA_time.RData"))
related
load(file=paste0(path_plots, "/ELASMO_PCA_time.RData"))
elasmo <- plot
load(file=paste0(path_plots, "/TELEO_PCA_time.RData"))
teleo <- plot
load(file=paste0(path_plots, "/TOT_PCA_time.RData"))
tot <- plot
plotall <- ggarrange(tot, teleo, NA, elasmo, labels = c("A","B","", "C"))
ggsave(file = paste0(path_plots, "/PCA_combined_time.pdf"), width=13, height=9.5)
plotall
range(dataphylo$MSM)
range(dataphylo$c_m)
dataphylo$Species[which(dataphylo$MSM>5)]
dataphylo$Species[which(dataphylo$c_m>5)]
dataphylo$Species[which(dataphylo$c_m<4)]
dataphylo$Species[which(dataphylo$c_m<-4)]
dataphylo$Species[which(dataphylo$c_m<c(-4))]
dataphylo$c_m
load(paste0(getwd(), "/02-Analysis/Outputs/IMAGETOT_STD_Log_BodyDepth.RData"))
dataphylo$Species[which(dataphylo$c_m<c(-4))]
17 857/19129
17857/19129
17857+272
