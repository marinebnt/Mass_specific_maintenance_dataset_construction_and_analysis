median(na.omit(cm_compare_with_g))
c_m_g
"Values for eps_m"
head(na.omit(eps_m))
range(na.omit(eps_m))
mean(na.omit(eps_m))
median(na.omit(eps_m))
eps_m_gmax  <- 0.74  # eV
eps_m_gmin  <- 0.41  # eV
#___________________________________Restart the unit conversion
#* J * g^{-beta} * h^-1 -> kg * g^{-beta} * h^-1 : ????
#* (Holt & Jorgensen 2014) : energy density+
EDsoma <- 4.62*10^6 #in J/kg
EDgona <- 6.93*10^6
spetotm$c_m <- spetotm$c_m/mean(EDsoma, EDgona)
#* kg * g^{-beta} * h^-1 -> g * g^{-beta} * h^-1
spetotm$c_m <- spetotm$c_m*10^3
#* g * g^{-beta} * h^-1 -> g * g^{-beta} * y^-1
spetotm$c_m <- spetotm$c_m*(24*365)
# c_meps_mFINAL_afterconversion <- data.frame(c_mosmo$label, c_mosmo$c_m, eps_mosmo)
# colnames(c_meps_mFINAL_afterconversion) <- c("species", "c_m (g * g^{-1-beta} * y^-1)", "eps_m")
# write.csv(c_meps_mFINAL_afterconversion, paste0(pathoutput, "/", "c_meps_mFINAL_afterconversion.csv"))
#
cor(na.omit(spetotm$eps_m), log(na.omit(spetotm$c_m)))
cor(na.omit(spetotmm$eps_m), log(na.omit(spetotmm$c_m)))
cor(na.omit(spetotm$eps_m), na.omit(spetotm$c_m))
cor(na.omit(spetotmm$eps_m), na.omit(spetotmm$c_m))
lmepsmcm <- lm(eps_mm~log(c_mm), data=spetotmm)
frame <- data.frame(log(spetotm$c_m), spetotm$ox_m)
frame <- na.omit(frame)
cor <- cor(frame$log.spetotm.c_m., frame$spetotm.ox_m)
cat("\n correlation c_m and ox_m AFTER unit conversion \n")
cat(cor)
########
#___________________________________Unit conversion of the mixed linear model outputs
########
#semID = 2
#c_mosmo   <- read.csv(paste0(pathoutput, "/", "c_mosmose", "_", modelname[semID], "psemFINALtot", ".csv"))
#eps_mosmo <- (6.78*10^(-6) - 2.146*10^(-6)*c_mosmo$c_m)*(-1) # *According to the linear model . (-1) because in Arrhenius' formula : (-eps_m/(k_b*T))
#* log(mg of O2 * g^{-beta} * h^-1) -> mg of O2 * g^{-beta} * h^-1
spetotmm$c_mm <- exp(spetotmm$c_mm)
#* mg of O2 * g^{-beta} * h^-1  -> mmol of O2 * g^{-beta} * h^-1 : divided by 32
#* (molar mass)
spetotmm$c_mm <- spetotmm$c_mm/32
#* mmol of O2 * g^{-beta} * h^-1 -> J * g^{-beta} * h^-1 : * 434
#* (Clarke & Johnston 1999)
spetotmm$c_mm <- spetotmm$c_mm*434
#___________________________________ Parenthesis
# compare c_m and eps_m values with the ones from Gillooly (_g) et al 2001
# to compare with Gillooly : needs to be Watt/g^3/4
#* J * g^{-beta} * h^-1 -> J * g^{-beta} * s^-1  : /(60*60)
cmm_compare_with_g <- log(spetotmm$c_mm/3600 )
# considering that the oxygen consumption is in mg of O2/h in my dataset
c_m_g       <- 14.47 # W/g^3/4
eps_m_gfish <- 5.02  # K/1000
eps_m_gmax  <- 0.74  # eV
eps_m_gmin  <- 0.41  # eV
"Values for c_m"
head(na.omit(cmm_compare_with_g))
range(na.omit(cmm_compare_with_g))
mean(na.omit(cmm_compare_with_g))
median(na.omit(cmm_compare_with_g))
c_m_g
"Values for eps_m"
head(na.omit(eps_mm))
range(na.omit(eps_mm))
mean(na.omit(eps_mm))
median(na.omit(eps_mm))
eps_m_gmax  <- 0.74  # eV
eps_m_gmin  <- 0.41  # eV
#___________________________________Restart the unit conversion
#* J * g^{-beta} * h^-1 -> kg * g^{-beta} * h^-1 : ????
#* (Holt & Jorgensen 2014) : energy density
EDsoma <- 4.62*10^6 #in J/kg
EDgona <- 6.93*10^6
spetotmm$c_mm <- spetotmm$c_mm/mean(EDsoma, EDgona)
#* kg * g^{-beta} * h^-1 -> g * g^{-beta} * h^-1 :
spetotmm$c_mm <- spetotmm$c_mm*10^3
#* g * g^{-beta} * h^-1 -> g * g^{-beta} * y^-1
spetotmm$c_mm <- spetotmm$c_mm*(24*365)
cor(na.omit(spetotm$eps_m), log(na.omit(spetotm$c_m)))
cor(na.omit(spetotmm$eps_m), log(na.omit(spetotmm$c_m)))
cor(na.omit(spetotm$eps_m), na.omit(spetotm$c_m))
cor(na.omit(spetotmm$eps_m), na.omit(spetotmm$c_m))
lmepsmcm <- lm(eps_mm~log(c_mm), data=spetotmm)
frame_tmp<- data.frame(log(spetotmm$c_mm), spetotmm$ox_mm)
frame_tmp <- na.omit(frame_tmp)
frame_mm <- cbind(frame_mm, frame_tmp)
cor <- cor(frame_mm$log.spetotmm.c_mm., frame_mm$spetotmm.ox_mm)
cat("\n correlation c_mm and ox_mm before unit conversion \n")
cat(cor)
cor <- cor(frame_mm$log.spetotmm.c_mm., frame_mm$spetotmm.c_mm)
cat("\n correlation c_mm and ox_mm before unit conversion \n")
cat(cor)
#####################
#####################
## plot(eps_m and c_m)
#####################
#####################
eps_malaia <- c(0.595682223, 0.333531516, 0.47339626, 0.268933469, 0.173632518, 0.37530696, 0.417973605,
0.2588154, 0.477614462, 0.307223157, 0.246413775, 0.298152628, 0.458920549, 0.308743327,
0.248132689, 0.404345929)
c_malaia   <- c(1.49E+11, 5034832.882, 540388517.7, 256579.0172, 5816.281889, 15368755.3, 52809960.9,
274469.8036, 2066760649, 1961447.834, 103677.1587, 1357998.53, 286079471.6, 1474805.094,
174241.9494, 31010952.85)
dataframe_boxplot_alaia <- data.frame(c(rep("lm", length(na.omit(spetotm$c_m))), rep("lmm", length(na.omit(spetotmm$c_mm))), rep("alaia", length(eps_malaia))),
c(log(na.omit(spetotm$c_m)), log(na.omit(spetotmm$c_mm)), log(c_malaia)),
c(log(na.omit(spetotm$eps_m)), log(na.omit(spetotmm$eps_mm)), log(eps_malaia)))
colnames(dataframe_boxplot_alaia) <- c("ref", "logc_m", "logeps_m")
par(mfrow=c(1,1))
ggplot(dataframe_boxplot_alaia, aes(x=ref, y=logc_m)) +
geom_boxplot()+
geom_signif(comparisons = list(c("alaia", "lm"), c("lm", "lmm"),
c("alaia", "lmm")),
map_signif_level=TRUE)
ggplot(dataframe_boxplot_alaia, aes(x=ref, y=logeps_m)) +
geom_boxplot()+
geom_signif(comparisons = list(c("alaia", "lm"), c("lm", "lmm"),
c("alaia", "lmm")),
map_signif_level=TRUE)
range(na.omit(c_malaia))
range(na.omit(spetotm$c_m))
range(na.omit(spetotmm$c_mm))
range(na.omit(eps_malaia))
range(na.omit(spetotm$eps_m))
range(na.omit(spetotmm$eps_mm))
par(mfrow=c(3,1))
hist(log(na.omit(spetotm$c_m)))
hist(log(na.omit(spetotmm$c_mm)))
hist(log(c_malaia))
par(mfrow=c(3,1))
hist(log(na.omit(spetotm$eps_m)))
hist(log(na.omit(spetotmm$eps_mm)))
hist(log(eps_malaia))
# correlation estimation  : carreful : set the correlation estimation after exp(log(c_m)) in the unit conversion process
cor(na.omit(spetotm$eps_m), log(na.omit(spetotm$c_m)))
cor(na.omit(spetotmm$eps_m), log(na.omit(spetotmm$c_m)))
cor(na.omit(spetotm$eps_m), na.omit(spetotm$c_m))
cor(na.omit(spetotmm$eps_m), na.omit(spetotmm$c_m))
lmepsmcm <- lm(eps_mm~log(c_mm), data=spetotmm)
par(mfrow=c(2,2))
a <- which(!is.na(spetotm$c_m))
b <- ggplot(oxdata, aes(x=Class, y=log(OxygenCons))) +
geom_boxplot() +
geom_signif(comparisons = list(c("Elasmobranchii", "Teleostei"), c("Chondrostei", "Elasmobranchii"),
c("Petromyzonti", "Elasmobranchii"), c("Petromyzonti", "Teleostei"),
c("Chondrostei", "Teleostei"), c("Chondrostei", "Petromyzonti")),
map_signif_level=TRUE)
c <- ggplot(spetotm[a,], aes(x=Class, y=log(c_m))) +
geom_boxplot() +
geom_signif(comparisons = list(c("Elasmobranchii", "Teleostei"), c("Chondrostei", "Elasmobranchii"),
c("Petromyzonti", "Elasmobranchii"), c("Petromyzonti", "Teleostei"),
c("Chondrostei", "Teleostei"), c("Chondrostei", "Petromyzonti")),
map_signif_level=TRUE)
d <- ggplot(spetotm[a,], aes(x=Class, y=eps_m)) +
geom_boxplot() +
geom_signif(comparisons = list(c("Elasmobranchii", "Teleostei"), c("Chondrostei", "Elasmobranchii"),
c("Petromyzonti", "Elasmobranchii"), c("Petromyzonti", "Teleostei"),
c("Chondrostei", "Teleostei"), c("Chondrostei", "Petromyzonti")),
map_signif_level=TRUE)
e <- ggarrange(d,b,c)
e
par(mfrow=c(2,2))
a <- which(!is.na(spetotm$c_m))
ggplot(data=spetotm[a,], aes(x=eps_m, y=log(c_m), label=Genus, col=DemersPelag))+
geom_point()+
theme_classic()
# +
#   geom_label_repel() +
#   theme_classic()
ggplot(data=spetotm) +
geom_point(aes(x=eps_m, y=log(c_m)), color=ifelse(spetot$Genus == "Oreochromis", 'red', 'black'))
# ggplot(data=spetotmm) +
#   geom_point(aes(x=eps_mm, y=c_mm, col=DemersPelag), color=ifelse(spetot$Genus == "Oreochromis", 'red', 'black'))
ggplot(data=spetotm) +
geom_point(aes(x=log(c_m), y=eps_m, col=DemersPelag))
ggplot(data=spetotmm) +
geom_point(aes(x=log(c_mm), y=eps_mm, col=DemersPelag))
##############
# write a csv file with this output
##############
spetotmm$c_m   <- spetotmm$c_mm
spetotmm$eps_m <- spetotmm$eps_mm
spetotmm       <- spetotmm[, -which(colnames(spetotmm) %in% c("c_mm", "eps_mm"))]
write.csv(spetotmm, paste0(pathoutput, "/spetot_fishabse_c_m_eps_mLMnoHABTREF.csv"))
path_analysis_out
############### ARE K AND M in LOG ????
K_M_LOG = T
#*****
####Preparing dataset####
#******
OUTPUT = "Outputs_WITHOUTUNITCVLOGNOTKM"
OUTPUT_phylo = "Outputs/phylosem_outputs_WITHUNIT_try_again"
source(paste0(getwd(), "/02-Analysis/Scripts/00-Functions_for_analysis.R"))
############################## Prepare dataset ##########################
path_phylosem_out <- paste0(getwd(), "/01-Simulations", OUTPUT_phylo)
path_output_genus <- paste0(getwd(), "/01-Simulations/Outputs/dataset_creation_output/dataset_for_phylosem/output_tot_stdmorpho")
path_analysis_out <- paste0(getwd(), "/02-Analysis/", OUTPUT)
dataphylo <- read.csv(paste0(path_phylosem_out, "/output_TLstdmecapsemFINALtot.csv"))
# beneat marine
# 14/10/24
############################
#*
#* THIS SCRIPT GOAL IS TO RUN PCAs AND phylogenetic PCAs AND Archetypal Analysis
#* ITS OUTPUTS ARE USED AS INPUTS FOR THE PLOT CONSTRUCTIONS OF THE FOLLOWING SCRIPTS
#*
############### ARE K AND M in LOG ????
K_M_LOG = T
#*****
####Preparing dataset####
#******
OUTPUT = "Outputs_WITHOUTUNITCVLOGNOTKM"
OUTPUT_phylo = "Outputs/phylosem_outputs_WITHUNIT_try_again"
source(paste0(getwd(), "/02-Analysis/Scripts/00-Functions_for_analysis.R"))
############################## Prepare dataset ##########################
path_phylosem_out <- paste0(getwd(), "/01-Simulations/", OUTPUT_phylo)
path_output_genus <- paste0(getwd(), "/01-Simulations/Outputs/dataset_creation_output/dataset_for_phylosem/output_tot_stdmorpho")
path_analysis_out <- paste0(getwd(), "/02-Analysis/", OUTPUT)
dataphylo <- read.csv(paste0(path_phylosem_out, "/output_TLstdmecapsemFINALtot.csv"))
if (K_M_LOG){
datagenus <- read.csv(paste0(path_output_genus, "/dataset_phylosemLOG.csv"))
IS_LOG_M = T
}
else {
# beneat marine
# 14/10/24
############################
#*
#* THIS SCRIPT GOAL IS TO RUN PCAs AND phylogenetic PCAs AND Archetypal Analysis
#* ITS OUTPUTS ARE USED AS INPUTS FOR THE PLOT CONSTRUCTIONS OF THE FOLLOWING SCRIPTS
#*
############### ARE K AND M in LOG ????
K_M_LOG = T
#*****
####Preparing dataset####
#******
OUTPUT = "Outputs_WITHOUTUNITCVLOGNOTKM"
OUTPUT_phylo = "Outputs/phylosem_outputs_WITHUNIT_try_again"
source(paste0(getwd(), "/02-Analysis/Scripts/00-Functions_for_analysis.R"))
############################## Prepare dataset ##########################
path_phylosem_out <- paste0(getwd(), "/01-Simulations/", OUTPUT_phylo)
path_output_genus <- paste0(getwd(), "/01-Simulations/Outputs/dataset_creation_output/dataset_for_phylosem/output_tot_stdmorpho")
path_analysis_out <- paste0(getwd(), "/02-Analysis/", OUTPUT)
dataphylo <- read.csv(paste0(path_phylosem_out, "/output_TLstdmecapsemFINALtot.csv"))
if (K_M_LOG){
datagenus <- read.csv(paste0(path_output_genus, "/dataset_phylosemLOG.csv"))
IS_LOG_M = T
}
if (!K_M_LOG) {
datagenus <- read.csv(paste0(path_output_genus, "/dataset_phylosem.csv"))
IS_LOG_M = F
}
datagenus$na <- is.na(datagenus$c_m)
# add a column with a number / habitat
dataphylo <- addhabitatcolumn(dataphylo)
dataphylo$Species <- str_replace(dataphylo[,"label"], "_", " ")
dataphylo <- left_join(dataphylo, datagenus[, c("Species", "na")])
# convert ratio of traits into trait value *************
dataphylo$Lm <- ratioTOtrait(dataphylo$Lm, dataphylo$Loo, IS_OPERATOR_Loo=TRUE, IS_LOG_M=IS_LOG_M)
dataphylo$tm <- ratioTOtrait(dataphylo$tm, dataphylo$M, IS_OPERATOR_Loo=FALSE, IS_LOG_M=IS_LOG_M) # 1/ M = longevity
#remove data that is unrealistic
dataphylo <- dataphylo[-which(dataphylo$Lm>dataphylo$Loo),]
dataphylo <- dataphylo[-which(dataphylo$tm>dataphylo$tmax),]
#Standardize
dataphylo[, -which(colnames(dataphylo) %in% c("Species", "X", "label", "hhabtot", "osmose", "na"))] <-
decostand(dataphylo[, -which(colnames(dataphylo) %in% c("Species", "X", "label", "hhabtot", "osmose", "na"))], "standardize")
##### Create datasets to be used ######
dataphylo <- left_join(dataphylo[, - which(colnames(dataphylo) %in% c("X", "label"))],
datagenus[, which(colnames(datagenus) %in% c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode"))])
colnames(dataphylo)[which(colnames(dataphylo) == "hhabtot")]<- "Habitat"
colnames(dataphylo)[which(colnames(dataphylo) == "fecundity")]<- "Fecundity"
colnames(dataphylo)[which(colnames(dataphylo) == "TLDiet")]<- "Trophic.lvl"
colnames(dataphylo)[which(colnames(dataphylo) == "tmax")]<- "Age.max"
colnames(dataphylo)[which(colnames(dataphylo) == "tm")]<- "Age.mat"
colnames(dataphylo)[which(colnames(dataphylo) == "M")]<- "Mortality"
colnames(dataphylo)[which(colnames(dataphylo) == "Woo")]<- "Weight.Inf"
dataplot  <- data.frame(dataphylo$K, dataphylo$Mortality, dataphylo$Temperature,
dataphylo[, -which(colnames(dataphylo) %in%
c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode", "c_m", "T"))])
dataacp   <- data.frame(dataphylo)
#********
# SELECTION CRITERIA = Elasmo
dataphylo_noelasmo <- dataphylo[-which(dataphylo$Class %in% c("Elasmobranchii")),]
dataplot_noelasmo  <- data.frame(dataphylo_noelasmo$K, dataphylo_noelasmo$Mortality, dataphylo_noelasmo$Temperature,
dataphylo_noelasmo[, -which(colnames(dataphylo_noelasmo) %in%
c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode", "c_m", "T"))])
dataacp_noelasmo   <- data.frame(dataphylo_noelasmo)
#*****
# SELECTION CRITERIA = Teleo
dataphylo_noteleo <- dataphylo[-which(dataphylo$Class %in% c("Teleostei")),]
dataplot_noteleo  <- data.frame(dataphylo_noteleo$K, dataphylo_noteleo$Mortality, dataphylo_noteleo$Temperature,
dataphylo_noteleo[, -which(colnames(dataphylo_noteleo) %in%
c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode", "c_m", "T"))])
dataacp_noteleo   <- data.frame(dataphylo_noteleo)
#********
# SELECTION CRITERIA = Teleo Pelagic
dataphylo_noteleo_pela <- dataphylo[which(dataphylo$habitatpelagic > 0.5),]
dataplot_noteleo_pela  <- data.frame(dataphylo_noteleo_pela$K, dataphylo_noteleo_pela$Mortality, dataphylo_noteleo_pela$Temperature,
dataphylo_noteleo_pela[, -which(colnames(dataphylo_noteleo_pela) %in%
c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode", "c_m", "T"))])
dataacp_noteleo_pela   <- data.frame(dataphylo_noteleo_pela)
############################## RUN Archetypal analysis ##########################
traits = c("Age.mat", "Age.max", "Mortality", "K", "Trophic.lvl", "Habitat")
veccol_teleo <- c("royalblue","darkgreen","tomato")
veccol_elasmo <- c("orange", "purple4", "pink")
veccol_tot <- c("royalblue", "tomato", "darkgreen")
vecAA_teleo <- c("Per", "Opp", "Equ")
vecAA_elasmo <- c("+ Age max", "Pelagic", "Demersal")
vecAA_elasmo_pela <- c("+K", "Pelagic", "-fec/+demer")
vecAA_eq <- c("a", "b", "c")
kmax=3
AAteleo <- runAA(dataplot_noelasmo, traits, kmax)
AAelasmo <- runAA(dataplot_noteleo, traits, kmax)
AAtot <- runAA(dataplot, traits, kmax)
dataplot_noelasmo
traits
kmax
############################## Prepare dataset ##########################
path_phylosem_out <- paste0(getwd(), "/01-Simulations/", OUTPUT_phylo)
path_output_genus <- paste0(getwd(), "/01-Simulations/Outputs/dataset_creation_output/dataset_for_phylosem/output_tot_stdmorpho")
path_analysis_out <- paste0(getwd(), "/02-Analysis/", OUTPUT)
dataphylo <- read.csv(paste0(path_phylosem_out, "/output_TLstdmecapsemFINALtot.csv"))
if (K_M_LOG){
datagenus <- read.csv(paste0(path_output_genus, "/dataset_phylosemLOG.csv"))
IS_LOG_M = T
}
if (!K_M_LOG) {
datagenus <- read.csv(paste0(path_output_genus, "/dataset_phylosem.csv"))
IS_LOG_M = F
}
datagenus$na <- is.na(datagenus$c_m)
datagenus
# add a column with a number / habitat
dataphylo <- addhabitatcolumn(dataphylo)
dataphylo
dataphylo$Species <- str_replace(dataphylo[,"label"], "_", " ")
dataphylo
dataphylo <- left_join(dataphylo, datagenus[, c("Species", "na")])
dataphylo
# convert ratio of traits into trait value *************
dataphylo$Lm <- ratioTOtrait(dataphylo$Lm, dataphylo$Loo, IS_OPERATOR_Loo=TRUE, IS_LOG_M=IS_LOG_M)
dataphylo
dataphylo$tm <- ratioTOtrait(dataphylo$tm, dataphylo$M, IS_OPERATOR_Loo=FALSE, IS_LOG_M=IS_LOG_M) # 1/ M = longevity
dataphylo
#remove data that is unrealistic
dataphylo <- dataphylo[-which(dataphylo$Lm>dataphylo$Loo),]
dataphylo
dataphylo <- dataphylo[-which(dataphylo$tm>dataphylo$tmax),]
dataphylo
which(dataphylo$tm>dataphylo$tmax)
length(which(dataphylo$Lm>dataphylo$Loo))>0
path_phylosem_out <- paste0(getwd(), "/01-Simulations/", OUTPUT_phylo)
path_output_genus <- paste0(getwd(), "/01-Simulations/Outputs/dataset_creation_output/dataset_for_phylosem/output_tot_stdmorpho")
path_analysis_out <- paste0(getwd(), "/02-Analysis/", OUTPUT)
dataphylo <- read.csv(paste0(path_phylosem_out, "/output_TLstdmecapsemFINALtot.csv"))
if (K_M_LOG){
datagenus <- read.csv(paste0(path_output_genus, "/dataset_phylosemLOG.csv"))
IS_LOG_M = T
}
if (!K_M_LOG) {
datagenus <- read.csv(paste0(path_output_genus, "/dataset_phylosem.csv"))
IS_LOG_M = F
}
datagenus$na <- is.na(datagenus$c_m)
# add a column with a number / habitat
dataphylo <- addhabitatcolumn(dataphylo)
dataphylo$Species <- str_replace(dataphylo[,"label"], "_", " ")
dataphylo <- left_join(dataphylo, datagenus[, c("Species", "na")])
# convert ratio of traits into trait value *************
dataphylo$Lm <- ratioTOtrait(dataphylo$Lm, dataphylo$Loo, IS_OPERATOR_Loo=TRUE, IS_LOG_M=IS_LOG_M)
dataphylo$tm <- ratioTOtrait(dataphylo$tm, dataphylo$M, IS_OPERATOR_Loo=FALSE, IS_LOG_M=IS_LOG_M) # 1/ M = longevity
length(which(dataphylo$Lm>dataphylo$Loo))>0
#remove data that is unrealistic
if(length(which(dataphylo$Lm>dataphylo$Loo))>0) {dataphylo <- dataphylo[-which(dataphylo$Lm>dataphylo$Loo),]}
if(length(which(dataphylo$tm>dataphylo$tmax))>0) {dataphylo <- dataphylo[-which(dataphylo$tm>dataphylo$tmax),]}
dataphylo
# beneat marine
# 14/10/24
############################
#*
#* THIS SCRIPT GOAL IS TO RUN PCAs AND phylogenetic PCAs AND Archetypal Analysis
#* ITS OUTPUTS ARE USED AS INPUTS FOR THE PLOT CONSTRUCTIONS OF THE FOLLOWING SCRIPTS
#*
############### ARE K AND M in LOG ????
K_M_LOG = T
#*****
####Preparing dataset####
#******
OUTPUT = "Outputs_WITHOUTUNITCVLOGNOTKM"
OUTPUT_phylo = "Outputs/phylosem_outputs_WITHUNIT_try_again"
source(paste0(getwd(), "/02-Analysis/Scripts/00-Functions_for_analysis.R"))
############################## Prepare dataset ##########################
path_phylosem_out <- paste0(getwd(), "/01-Simulations/", OUTPUT_phylo)
path_output_genus <- paste0(getwd(), "/01-Simulations/Outputs/dataset_creation_output/dataset_for_phylosem/output_tot_stdmorpho")
path_analysis_out <- paste0(getwd(), "/02-Analysis/", OUTPUT)
dataphylo <- read.csv(paste0(path_phylosem_out, "/output_TLstdmecapsemFINALtot.csv"))
if (K_M_LOG){
datagenus <- read.csv(paste0(path_output_genus, "/dataset_phylosemLOG.csv"))
IS_LOG_M = T
}
if (!K_M_LOG) {
datagenus <- read.csv(paste0(path_output_genus, "/dataset_phylosem.csv"))
IS_LOG_M = F
}
datagenus$na <- is.na(datagenus$c_m)
# add a column with a number / habitat
dataphylo <- addhabitatcolumn(dataphylo)
dataphylo$Species <- str_replace(dataphylo[,"label"], "_", " ")
dataphylo <- left_join(dataphylo, datagenus[, c("Species", "na")])
# convert ratio of traits into trait value *************
dataphylo$Lm <- ratioTOtrait(dataphylo$Lm, dataphylo$Loo, IS_OPERATOR_Loo=TRUE, IS_LOG_M=IS_LOG_M)
dataphylo$tm <- ratioTOtrait(dataphylo$tm, dataphylo$M, IS_OPERATOR_Loo=FALSE, IS_LOG_M=IS_LOG_M) # 1/ M = longevity
#remove data that is unrealistic
if(length(which(dataphylo$Lm>dataphylo$Loo))>0) {dataphylo <- dataphylo[-which(dataphylo$Lm>dataphylo$Loo),]}
if(length(which(dataphylo$tm>dataphylo$tmax))>0) {dataphylo <- dataphylo[-which(dataphylo$tm>dataphylo$tmax),]}
#Standardize
dataphylo[, -which(colnames(dataphylo) %in% c("Species", "X", "label", "hhabtot", "osmose", "na"))] <-
decostand(dataphylo[, -which(colnames(dataphylo) %in% c("Species", "X", "label", "hhabtot", "osmose", "na"))], "standardize")
##### Create datasets to be used ######
dataphylo <- left_join(dataphylo[, - which(colnames(dataphylo) %in% c("X", "label"))],
datagenus[, which(colnames(datagenus) %in% c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode"))])
colnames(dataphylo)[which(colnames(dataphylo) == "hhabtot")]<- "Habitat"
colnames(dataphylo)[which(colnames(dataphylo) == "fecundity")]<- "Fecundity"
colnames(dataphylo)[which(colnames(dataphylo) == "TLDiet")]<- "Trophic.lvl"
colnames(dataphylo)[which(colnames(dataphylo) == "tmax")]<- "Age.max"
colnames(dataphylo)[which(colnames(dataphylo) == "tm")]<- "Age.mat"
colnames(dataphylo)[which(colnames(dataphylo) == "M")]<- "Mortality"
colnames(dataphylo)[which(colnames(dataphylo) == "Woo")]<- "Weight.Inf"
dataplot  <- data.frame(dataphylo$K, dataphylo$Mortality, dataphylo$Temperature,
dataphylo[, -which(colnames(dataphylo) %in%
c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode", "c_m", "T"))])
dataacp   <- data.frame(dataphylo)
#********
# SELECTION CRITERIA = Elasmo
dataphylo_noelasmo <- dataphylo[-which(dataphylo$Class %in% c("Elasmobranchii")),]
dataplot_noelasmo  <- data.frame(dataphylo_noelasmo$K, dataphylo_noelasmo$Mortality, dataphylo_noelasmo$Temperature,
dataphylo_noelasmo[, -which(colnames(dataphylo_noelasmo) %in%
c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode", "c_m", "T"))])
dataacp_noelasmo   <- data.frame(dataphylo_noelasmo)
#*****
# SELECTION CRITERIA = Teleo
dataphylo_noteleo <- dataphylo[-which(dataphylo$Class %in% c("Teleostei")),]
dataplot_noteleo  <- data.frame(dataphylo_noteleo$K, dataphylo_noteleo$Mortality, dataphylo_noteleo$Temperature,
dataphylo_noteleo[, -which(colnames(dataphylo_noteleo) %in%
c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode", "c_m", "T"))])
dataacp_noteleo   <- data.frame(dataphylo_noteleo)
#********
# SELECTION CRITERIA = Teleo Pelagic
dataphylo_noteleo_pela <- dataphylo[which(dataphylo$habitatpelagic > 0.5),]
dataplot_noteleo_pela  <- data.frame(dataphylo_noteleo_pela$K, dataphylo_noteleo_pela$Mortality, dataphylo_noteleo_pela$Temperature,
dataphylo_noteleo_pela[, -which(colnames(dataphylo_noteleo_pela) %in%
c("Class", "Order", "Family", "Genus", "Species", "SpecCodeode", "c_m", "T"))])
dataacp_noteleo_pela   <- data.frame(dataphylo_noteleo_pela)
############################## RUN Archetypal analysis ##########################
traits = c("Age.mat", "Age.max", "Mortality", "K", "Trophic.lvl", "Habitat")
veccol_teleo <- c("royalblue","darkgreen","tomato")
veccol_elasmo <- c("orange", "purple4", "pink")
veccol_tot <- c("royalblue", "tomato", "darkgreen")
vecAA_teleo <- c("Per", "Opp", "Equ")
vecAA_elasmo <- c("+ Age max", "Pelagic", "Demersal")
vecAA_elasmo_pela <- c("+K", "Pelagic", "-fec/+demer")
vecAA_eq <- c("a", "b", "c")
kmax=3
AAteleo <- runAA(dataplot_noelasmo, traits, kmax)
AAelasmo <- runAA(dataplot_noteleo, traits, kmax)
AAtot <- runAA(dataplot, traits, kmax)
############################## SAVE outputs ##########################
save.image(paste0(path_analysis_out, "/IMAGE_AA_FOR_ANALYSIS.RData"))
save(AAteleo, AAelasmo, AAtot, dataphylo, dataacp, dataplot, datagenus,
dataplot_noelasmo, dataacp_noelasmo, dataphylo_noelasmo,
dataplot_noteleo, dataacp_noteleo, dataphylo_noteleo,
file=paste0(path_analysis_out, "/IMAGE_AA_CONSTRUCTED.RData"))
# beneat marine
# 14/10/24
# Ternary plots of the archetypal analysis
OUTPUT="Outputs_WITHUNITCV_again"
colAA = c("royalblue", "darkgreen", "tomato")
path_plots <- paste0(getwd(), "/02-Analysis/Outputs/plots")
load(paste0(getwd(), "/02-Analysis/Outputs/IMAGE_AA_FOR_ANALYSIS.RData"))
source(paste0(getwd(), "/02-Analysis/Scripts/00-Functions_for_analysis.R"))
vecAA_eq = c("a","b","c")
AAAtot <- AAtot
# ternary plot with the gradient of mass specific maintenance values
beta_iv1_tot = dataplot[, which(colnames(dataplot) %in%  traits)]
t(parameters(AAAtot))     ## This shows the trait values of the selected archetypes
veccol_tot_barplot <- colAA
barplot(AAAtot, beta_iv1_tot, percentiles=TRUE, col.atypes = veccol_tot_barplot)
barplot(AAAtot, beta_iv1_tot, percentiles=TRUE)  # same but as a barplot
pcplot(AAAtot, beta_iv1_tot, atypes.col = veccol_tot_barplot, atypes.lty =c(1,2,3)) # same but as a plot showing each value
plot1 <- plotggtern(dataphylo=dataphylo, AA=AAAtot, vecAA_eq=vecAA_eq, bins=6)+
labs(
x = "Opportunistic",       # Custom name for x-axis
y = "Equilibrium",       # Custom name for y-axis
z = "Periodic",        # Custom name for z-axis
)+
theme(
tern.axis.title.T = element_text(size = 12, angle = 0, hjust = 0.5), # Top axis
tern.axis.title.L = element_text(size = 12, angle = -60, hjust = 0.5), # Left axis
tern.axis.title.R = element_text(size = 12, angle = -60, hjust = 1.25, vjust = -0.5) # Right axis
)
plot1
ggsave(plot1, file = paste0(path_plots, "/ternary_plot_tot_time.pdf"), width=8.02, height=5.1 )
dataacp_noteleo_pela
dataphylo
cor(dataphylo$c_m, dataphylo$habitatbenthopelagic)
cor(dataphylo$c_m, dataphylo$habitatdemersal)
path_phylosem_out
dataphylo <- read.csv(paste0(path_phylosem_out, "/output_TLstdmecapsemFINALtot.csv"))
#Load packages and files
path <- c("X:/LAST_PHYLO")
pathoutput <-  c("Z:/LAST_PHYLOSEM_try_again")
dataset        <- read.csv(paste0(path, "/output_tot_try_again_unit_conversion/dataset_phylosem.csv"))
